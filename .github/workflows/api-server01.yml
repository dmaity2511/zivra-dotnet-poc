name: Build and deploy .NET Core application to Web App Api-sever
on:
  push:
    branches:
    - release-cd
env:
  AZURE_WEBAPP_NAME: api-server01
  AZURE_WEBAPP_PACKAGE_PATH: ./publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 6.0.x
  WORKING_DIRECTORY: .
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore
      run: dotnet restore "${{ env.WORKING_DIRECTORY }}"
    - name: Build
      run: dotnet build "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-restore
    - name: Test
      run: dotnet test "${{ env.WORKING_DIRECTORY }}" --no-build
    - name: Publish
      run: dotnet publish "${{ env.WORKING_DIRECTORY }}" --configuration ${{ env.CONFIGURATION }} --no-build --output "${{ env.AZURE_WEBAPP_PACKAGE_PATH }}"
    - name: Publish Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
  publish-package:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Zipping the Package
      run: dotnet pack --configuration Release
    - name: Add Source
      run: dotnet nuget add source --username ${{ secrets.USER_NAME }} --password ${{ secrets.API_KEY }} --store-password-in-clear-text --name ${{vars.NUGET_LINK}} ${{vars.NUGET_SOURCE}}
    - name: Publish the Package
      run: dotnet nuget push ${{vars.NUGET_PATH}}  --api-key ${{ secrets.API_KEY }}  --source ${{vars.NUGET_LINK}}

  publish-artifact:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release-cd'
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet publish --configuration Release
    - name: Archiveing a Built Artifact
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-artifact
        path: ${{vars.NUGET_ARTTIFACT_PATH}}
        if-no-files-found: error
  deploy:
    runs-on: ubuntu-latest
    needs: publish-artifact
    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    - name: Deploy to Azure WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.api_server01_8AC7 }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
